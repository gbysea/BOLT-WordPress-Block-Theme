name: Branch Protection Checks

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for large files
      run: |
        echo "üîç Checking for files larger than 10MB..."
        find . -type f -size +10M -not -path "./.git/*" | while read file; do
          echo "‚ö†Ô∏è  Large file found: $file"
          ls -lh "$file"
        done
        
        # Fail if any large files found
        if find . -type f -size +10M -not -path "./.git/*" | grep -q .; then
          echo "‚ùå Large files detected. Please use Git LFS for files over 10MB."
          exit 1
        else
          echo "‚úÖ No large files detected."
        fi
    
    - name: Validate theme structure
      run: |
        echo "üîç Validating WordPress theme structure..."
        
        # Check for required theme files
        required_files=(
          "olon-tv-block-theme/style.css"
          "olon-tv-block-theme/theme.json"
          "olon-tv-block-theme/functions.php"
        )
        
        missing_files=()
        for file in "${required_files[@]}"; do
          if [[ ! -f "$file" ]]; then
            missing_files+=("$file")
          fi
        done
        
        if [[ ${#missing_files[@]} -gt 0 ]]; then
          echo "‚ùå Missing required theme files:"
          printf '%s\n' "${missing_files[@]}"
          exit 1
        else
          echo "‚úÖ All required theme files present."
        fi
    
    - name: Check CSS syntax
      run: |
        echo "üîç Checking CSS files for basic syntax..."
        
        # Find all CSS files
        css_files=$(find . -name "*.css" -not -path "./.git/*")
        
        if [[ -n "$css_files" ]]; then
          echo "Found CSS files:"
          echo "$css_files"
          
          # Basic CSS syntax check (looking for unclosed braces)
          for file in $css_files; do
            echo "Checking $file..."
            # Count opening and closing braces
            open_braces=$(grep -o '{' "$file" | wc -l)
            close_braces=$(grep -o '}' "$file" | wc -l)
            
            if [[ $open_braces -ne $close_braces ]]; then
              echo "‚ùå Unbalanced braces in $file (open: $open_braces, close: $close_braces)"
              exit 1
            fi
          done
          echo "‚úÖ CSS syntax check passed."
        else
          echo "‚ÑπÔ∏è  No CSS files found to check."
        fi
    
    - name: Validate JSON files
      run: |
        echo "üîç Validating JSON files..."
        
        json_files=$(find . -name "*.json" -not -path "./.git/*" -not -path "./node_modules/*")
        
        if [[ -n "$json_files" ]]; then
          echo "Found JSON files:"
          echo "$json_files"
          
          for file in $json_files; do
            echo "Validating $file..."
            if ! python3 -m json.tool "$file" > /dev/null; then
              echo "‚ùå Invalid JSON syntax in $file"
              exit 1
            fi
          done
          echo "‚úÖ JSON validation passed."
        else
          echo "‚ÑπÔ∏è  No JSON files found to validate."
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for sensitive files
      run: |
        echo "üîç Scanning for sensitive files and patterns..."
        
        # Check for common sensitive file patterns
        sensitive_patterns=(
          "*.key"
          "*.pem" 
          "*.p12"
          "*.pfx"
          ".env"
          "config.php"
          "wp-config.php"
          "*password*"
          "*secret*"
        )
        
        found_sensitive=false
        for pattern in "${sensitive_patterns[@]}"; do
          if find . -name "$pattern" -not -path "./.git/*" | grep -q .; then
            echo "‚ö†Ô∏è  Potentially sensitive files found matching pattern: $pattern"
            find . -name "$pattern" -not -path "./.git/*"
            found_sensitive=true
          fi
        done
        
        # Check for hardcoded secrets in code
        if grep -r -i -E "(password|secret|key|token)\s*=\s*['\"][^'\"]{8,}" . --exclude-dir=.git; then
          echo "‚ö†Ô∏è  Potential hardcoded secrets found in code"
          found_sensitive=true
        fi
        
        if [[ "$found_sensitive" == "true" ]]; then
          echo "‚ùå Security scan found potential issues. Please review."
          exit 1
        else
          echo "‚úÖ Security scan passed."
        fi

  accessibility-check:
    name: Accessibility Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check HTML templates for accessibility
      run: |
        echo "üîç Checking HTML templates for basic accessibility..."
        
        html_files=$(find . -name "*.html" -not -path "./.git/*")
        
        if [[ -n "$html_files" ]]; then
          echo "Found HTML files:"
          echo "$html_files"
          
          issues_found=false
          
          for file in $html_files; do
            echo "Checking $file..."
            
            # Check for images without alt text
            if grep -q '<img[^>]*>' "$file" && ! grep -q 'alt=' "$file"; then
              echo "‚ö†Ô∏è  Images without alt text found in $file"
              issues_found=true
            fi
            
            # Check for proper heading structure
            if grep -q '<h[1-6]' "$file"; then
              echo "‚úì Headings found in $file"
            fi
          done
          
          if [[ "$issues_found" == "true" ]]; then
            echo "‚ö†Ô∏è  Accessibility issues found. Please review."
            # Don't fail the build for accessibility warnings, just notify
          else
            echo "‚úÖ Basic accessibility check passed."
          fi
        else
          echo "‚ÑπÔ∏è  No HTML files found to check."
        fi

  deployment-ready:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Verify theme completeness
      run: |
        echo "üîç Verifying theme is deployment ready..."
        
        # Check for README
        if [[ ! -f "olon-tv-block-theme/README.md" ]]; then
          echo "‚ùå Theme README.md missing"
          exit 1
        fi
        
        # Check for proper version in style.css
        if grep -q "Version:" "olon-tv-block-theme/style.css"; then
          echo "‚úÖ Version found in style.css"
        else
          echo "‚ö†Ô∏è  No version specified in style.css"
        fi
        
        echo "‚úÖ Theme appears deployment ready."